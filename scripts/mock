#! /usr/bin/env ruby

require 'rock/bundle'
require 'vizkit'

Bundles.initialize 'rosa_mock'
Bundles.transformer.load_conf('config/transforms.rb')

# Note on notations:
#   _p suffix means output port
#   _pi suffix means input port
#   _s suffix means sample

bus = Orocos::RubyTaskContext.new 'bus1'
inductive_left_p  = bus.create_output_port 'inductive_left', '/raw_io/Digital'
inductive_right_p = bus.create_output_port 'inductive_right', '/raw_io/Digital'
inductive_key_attached_p   = bus.create_output_port 'inductive_key_attached', '/raw_io/Digital'
inductive_key_detached_p   = bus.create_output_port 'inductive_key_detached', '/raw_io/Digital'

seaking = Orocos::RubyTaskContext.new 'seaking'
seaking_p = seaking.create_output_port 'profiling_scan',
    '/base/samples/LaserScan'

ptu = Orocos::RubyTaskContext.new 'ptu'
ptu_p = ptu.create_output_port 'joints_samples',
    '/base/samples/Joints'
ptu_pi = ptu.create_input_port 'joints_cmd',
    '/base/samples/Joints'

inclination_body = Orocos::RubyTaskContext.new 'inclination_body'
inclination_body_p = inclination_body.create_output_port 'angle',
    '/base/Angle'
inclination_body_tf = inclination_body.create_output_port 'roll_samples','/base/samples/RigidBodyState'

pressure = Orocos::RubyTaskContext.new 'pressure'
pressure_p = pressure.create_output_port 'pressure_samples',
    '/base/samples/Pressure'
pressure_tf = pressure.create_output_port 'depth_samples','/base/samples/RigidBodyState'

ui = Vizkit.default_loader.load Bundles.find_file('scripts', 'gui.ui')
ui.window_title = "ROSA - Mock Test UI"

#newframe = Qt::Widget.new
#newframe.window_title = "ROSA - Mock Test UI"

#vbox = Qt::VBoxLayout.new(newframe)
#newframe.add_widget vbox

#ok = Qt::PushButton.new "OK"

#vbox.add_widget ui
#vbox.add_widget ok


# PTU feedback

ui.connect_to_task 'ptu' do |_|
    panSpin.connect PORT('joints_cmd'), SLOT('setValue(int)'),
        getter: lambda { |sample| Integer(sample.elements[0].position * 180 / Math::PI) }
    tiltSpin.connect PORT('joints_cmd'), SLOT('setValue(int)'),
        getter: lambda { |sample| Integer(sample.elements[1].position * 180 / Math::PI) }
end

# Connect the slide and the spin
ui.pressureSlide.connect(SIGNAL('valueChanged(int)')) do |value|
    ui.pressureSpin.value = Float(value) / 10
end
ui.pressureSpin.connect(SIGNAL('valueChanged(double)')) do |value|
    ui.pressureSlide.value = Integer(value * 10)
end

inductive_left_s  = Types::RawIo::Digital.new(time: Time.now, data: false)
inductive_right_s = Types::RawIo::Digital.new(time: Time.now, data: false)
inductive_key_attached_s   = Types::RawIo::Digital.new(time: Time.now, data: false)
inductive_key_detached_s   = Types::RawIo::Digital.new(time: Time.now, data: false)
ptu_s = Types::Base::Samples::Joints.new(
    time: Time.now,
    names: %w{pan tilt},
    elements: [ Hash[position: 0], Hash[position: 0] ])

inclination_body_s = Types::Base::Angle.new(rad: 0)
pressure_s = Types::Base::Samples::Pressure.new(
    time: Time.now,
    pascal: 100000)

# Scan Button
std_scan = Types::Base::Samples::LaserScan.new

scan_timer = Qt::Timer.new
scan_timer.connect(SIGNAL('timeout()')) do
    if std_scan.respond_to?(:time)
        std_scan.time = Time.now
    end
    seaking_p.write std_scan
end

ui.sendScan.connect(SIGNAL('toggled(bool)')) do |state|
    if state
        scan_timer.start(100)
    else
        scan_timer.stop
    end
end

# Connect the UI to the tasks
ui.inductiveLeftButton.connect(SIGNAL('toggled(bool)')) do |state|
    inductive_left_s.data = state
end
ui.inductiveRightButton.connect(SIGNAL('toggled(bool)')) do |state|
    inductive_right_s.data = state
end
ui.inductiveKeyAttachedButton.connect(SIGNAL('toggled(bool)')) do |state|
    inductive_key_attached_s.data = state
end
ui.inductiveKeyDetachedButton.connect(SIGNAL('toggled(bool)')) do |state|
    inductive_key_detached_s.data = state
end
ui.panSpin.connect(SIGNAL('valueChanged(int)')) do |deg|
    ptu_s.elements[0].position = deg * Math::PI / 180
end
ui.tiltSpin.connect(SIGNAL('valueChanged(int)')) do |deg|
    ptu_s.elements[1].position = deg * Math::PI / 180
end
ui.inclinationBodySpin.connect(SIGNAL('valueChanged(int)')) do |deg|
    inclination = deg * Math::PI / 180 
    inclination_body_s.rad = inclination
    inclination_body_tf_s.orientation = Eigen::Quaternion.from_angle_axis(inclination, Eigen::Vector3.UnitX())
end
ui.pressureSpin.connect(SIGNAL('valueChanged(double)')) do |bar|
    pressure_s.pascal = bar * 100000
    pressure_tf_s.position[2]=bar*10.2
end

#ui.inclinationBodySpin.setValue();


updates = Array[
    [inductive_left_s, inductive_left_p],
    [inductive_right_s, inductive_right_p],
    [inductive_key_attached_s, inductive_key_attached_p],
    [inductive_key_detached_s, inductive_key_detached_p],
    [ptu_s, ptu_p],
    [inclination_body_s, inclination_body_p],
    [inclination_body_tf_s, inclination_body_tf],
    [pressure_s, pressure_p],
    [pressure_tf_s,pressure_tf]]

timer = Qt::Timer.new
timer.connect(SIGNAL('timeout()')) do
    updates.each do |sample, port|
        if sample.respond_to?(:time)
            sample.time = Time.now
        end
        port.write sample
    end
end
timer.start(100)

Bundles.run do
    Bundles.transformer.setup(pressure,inclination_body)
    ui.show
    #vbox.show
    Vizkit.exec
    Bundles.watch(pressure,inclination_body)
end


