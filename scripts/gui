#! /usr/bin/env ruby
#
require 'rock/bundle'
require 'vizkit'
require_relative 'autoscan_state_machine'

config = 'green'
options = OptionParser.new do |opt|
    opt.on '--blue', 'run with the blue board (default is to run for the green board)' do |flag|
	if flag
	    config = 'blue'
	end
    end
end
options.parse ARGV


Bundles.public_logs = false
Bundles.initialize 'rosa_gui'
Orocos.load_typekit 'base'
Orocos.load_typekit 'raw_io'

main_ui = Vizkit.default_loader.load Bundles.find_file('scripts', 'cmd_status.ui')
main_ui.window_title = "ROSA - Control and Status Debugging UI"
task_states = Vizkit.default_loader.StateViewer
status_ui = Vizkit.default_loader.load Bundles.find_file('scripts', 'gui.ui')
status_layout = Qt::VBoxLayout.new(main_ui.statusGroup)
status_layout.add_widget task_states
status_layout.add_widget status_ui
# Connect the slide and the spin
status_ui.pressureSlide.connect(SIGNAL('valueChanged(int)')) do |value|
    status_ui.pressureSpin.value = Float(value) / 10
end
status_ui.pressureSpin.connect(SIGNAL('valueChanged(double)')) do |value|
    status_ui.pressureSlide.value = Integer(value * 10)
end
main_ui.resize(900, 0)
main_ui.show

status_ui.connect_to_task 'bus1' do |task|
    task_states.add task
    inductiveLeftButton.connect PORT('inductive_left'), SLOT('setChecked(bool)'),
        getter: lambda { |sample| sample.data != 0 }
    inductiveRightButton.connect PORT('inductive_right'), SLOT('setChecked(bool)'),
        getter: lambda { |sample| sample.data != 0 }
    inductiveKeyAttachedButton.connect PORT('inductive_key_attached'), SLOT('setChecked(bool)'),
        getter: lambda { |sample| sample.data != 0 }
    inductiveKeyDetachedButton.connect PORT('inductive_key_detached'), SLOT('setChecked(bool)'),
        getter: lambda { |sample| sample.data != 0 }
end
status_ui.connect_to_task 'bus2' do |task|
    task_states.add task
end

status_ui.connect_to_task 'micron' do |task|
    task_states.add task
end

status_ui.connect_to_task 'seaking' do |task|
    task_states.add task
end

status_ui.connect_to_task 'inclination_body' do |task|
    task_states.add task
    inclinationBodySlide.connect PORT('angle'), SLOT('setValue(int)'),
        getter: lambda { |sample| Integer(sample.rad * 180 / Math::PI) }
end
status_ui.connect_to_task 'pressure' do |task|
    task_states.add task
    pressureSlide.connect PORT('pressure_samples'), SLOT('setValue(int)'),
        getter: lambda { |sample| Integer(sample.pascal / 10_000) }
end
status_ui.connect_to_task 'ptu' do |task|
    task_states.add task
    panSlide.connect PORT('joints_samples'), SLOT('setValue(int)'),
        getter: lambda { |sample| Integer(sample.elements[0].position * 180 / Math::PI) }
    tiltSlide.connect PORT('joints_samples'), SLOT('setValue(int)'),
        getter: lambda { |sample| Integer(sample.elements[1].position * 180 / Math::PI) }
    task.on_state_change do |state|
        if state == :RUNNING
            listener = task.port('joints_samples').on_data do |sample|
            	main_ui.panSetSlide.value = sample.elements[0].position * 180 / Math::PI
            	main_ui.tiltSetSlide.value = sample.elements[1].position * 180 / Math::PI
            	main_ui.panSetSlide.enabled = true
            	main_ui.tiltSetSlide.enabled = true
            	listener.stop
            end
            initialize_command_from_next_joint_sample = true
        else
            main_ui.panSetSlide.enabled = true
            main_ui.tiltSetSlide.enabled = true
        end
    end
end

ptu_cmd = Types::Base::Commands::Joints.new(
    time: Time.now,
    names: %w{pan tilt},
    elements: [ Hash[position: 0], Hash[position: 0] ])
main_ui.connect_to_task 'ptu' do |task|
    main_ui.panSetSlide.enabled = false
    
    panSetSlide.connect SIGNAL('valueChanged(int)'), PORT('joints_cmd'),
        getter: lambda { |value| ptu_cmd.elements[0].position = value * Math::PI / 180; pp ptu_cmd; ptu_cmd }
    main_ui.tiltSetSlide.enabled = false
    tiltSetSlide.connect SIGNAL('valueChanged(int)'), PORT('joints_cmd'),
        getter: lambda { |value| ptu_cmd.elements[1].position = value * Math::PI / 180; pp ptu_cmd; ptu_cmd }
end


state_machine = nil
main_ui.runButton.connect SIGNAL('toggled(bool)') do |flag|
    pan_range = AutoscanStateMachine::Range.new(
        main_ui.panSetSlide.value * Math::PI / 180,
        main_ui.panEndAngle.value * Math::PI / 180,
        main_ui.panStepAngle.value * Math::PI / 180)
    tilt_range = AutoscanStateMachine::Range.new(
        main_ui.tiltSetSlide.value * Math::PI / 180,
        main_ui.tiltEndAngle.value * Math::PI / 180,
        main_ui.tiltStepAngle.value * Math::PI / 180)

    # Assign the state machine to a variable to avoid having it garbage
    # collected
    state_machine = AutoscanStateMachine.run(0.1, pan_range, tilt_range)
    autoscan_logger = 
	begin Bundles.get 'ptu_Logger'
	rescue Orocos::NotFound
	end
    state_machine.connect SIGNAL('moveJoints(double,double)') do |cmd_pan, cmd_tilt|
        main_ui.panSetSlide.setValue(Integer( cmd_pan * 180 / Math::PI ))
        main_ui.tiltSetSlide.setValue(Integer( cmd_tilt * 180 / Math::PI ))
    end
    if autoscan_logger
        state_machine.connect SIGNAL('moveJoints(double,double)') do |cmd_pan, cmd_tilt|
	    autoscan_logger.log_annotations Time.now, 'PTU_MOVING', "#{cmd_pan} #{cmd_tilt}"
	end
        state_machine.connect SIGNAL('scanning()') do
	    autoscan_logger.log_annotations Time.now, 'PTU_MOVED', "#{state_machine.pan} #{state_machine.tilt}"
	end
    end

    #Connecting state_machine SLOTS
    Orocos::Async.proxy('ptu').port('joints_samples').on_data do |sample|
        state_machine.update_position(sample.elements[0].position, sample.elements[1].position)  
    end
    Orocos::Async.proxy('seaking').port('profiling_scan').on_data do
        state_machine.received_scan
    end
    Orocos::Async.proxy('micron').port('sonar_beam').on_data do
        state_machine.received_scan
    end
end

Vizkit.exec
