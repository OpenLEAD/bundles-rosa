#! /usr/bin/env ruby

require 'vizkit'

parser = OptionParser.new do |opt|
    opt.on('--host=HOSTNAME', String) do |hostname|
        Orocos::CORBA.name_service.ip = hostname.to_str
    end
end
remaining = parser.parse(ARGV)

Orocos.initialize

w = Vizkit.vizkit3d_widget
w.show

conf = Transformer::Configuration.new
conf.load(remaining.first)
conf.each_static_transform do |trsf|
    w.setTransformation(trsf.from.dup, trsf.to.dup, trsf.translation.to_qt, trsf.rotation.to_qt)
end
conf.each_dynamic_transform do |trsf|
    task_name, *port_name = *trsf.producer.split('.')
    task_name = "#{Orocos::CORBA.name_service.ip}/#{task_name}"
    task = Orocos::Async.proxy(task_name)
    puts "looking for task #{task_name}"
    port = task.port(port_name.join('.'))
    port.on_reachable do
        puts "#{port.name} reachable, provides #{trsf.from} => #{trsf.to}"
    end
    port.on_data do |sample|
        if trsf.from != sample.sourceFrame
            puts "#{port.name}: supposed to provide #{trsf.from} => #{trsf.to} but sourceFrame==#{sample.sourceFrame}"
        elsif trsf.to != sample.targetFrame
            puts "#{port.name}: supposed to provide #{trsf.from} => #{trsf.to} but targetFrame==#{sample.targetFrame}"
        else
            w.setTransformation(trsf.from.dup, trsf.to.dup, sample.position.to_qt, sample.rotation.to_qt)
        end
    end
end

w.setTransformer(true)
Vizkit.exec

